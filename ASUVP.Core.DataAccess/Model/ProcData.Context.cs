//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASUVP.Core.DataAccess.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProcData : DbContext
    {
        public ProcData()
            : base("name=ProcData")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AgreementDetele(Guid? documentId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementDetele", documentIdParameter);
        }
    
        public virtual int AgreementInsert(Guid? documentId, Nullable<System.DateTime> dateBeg, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> dateStop, Guid? сustomerBankId, Guid? сustomerAddressId, Guid? performerBankId, Guid? performerAddressId, Guid? createdBy)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            var dateBegParameter = dateBeg.HasValue ?
                new ObjectParameter("DateBeg", dateBeg) :
                new ObjectParameter("DateBeg", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var dateStopParameter = dateStop.HasValue ?
                new ObjectParameter("DateStop", dateStop) :
                new ObjectParameter("DateStop", typeof(System.DateTime));
    
            var сustomerBankIdParameter = сustomerBankId.HasValue ?
                new ObjectParameter("СustomerBankId", сustomerBankId) :
                new ObjectParameter("СustomerBankId", typeof(System.Guid));
    
            var сustomerAddressIdParameter = сustomerAddressId.HasValue ?
                new ObjectParameter("СustomerAddressId", сustomerAddressId) :
                new ObjectParameter("СustomerAddressId", typeof(System.Guid));
    
            var performerBankIdParameter = performerBankId.HasValue ?
                new ObjectParameter("PerformerBankId", performerBankId) :
                new ObjectParameter("PerformerBankId", typeof(System.Guid));
    
            var performerAddressIdParameter = performerAddressId.HasValue ?
                new ObjectParameter("PerformerAddressId", performerAddressId) :
                new ObjectParameter("PerformerAddressId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementInsert", documentIdParameter, dateBegParameter, dateEndParameter, dateStopParameter, сustomerBankIdParameter, сustomerAddressIdParameter, performerBankIdParameter, performerAddressIdParameter, createdByParameter);
        }
    
        public virtual int AgreementUpdate(Guid? documentId, Nullable<System.DateTime> dateBeg, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> dateStop, Guid? сustomerBankId, Guid? customerAddressId, Guid? performerBankId, Guid? performerAddressId, Guid? updatedBy)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            var dateBegParameter = dateBeg.HasValue ?
                new ObjectParameter("DateBeg", dateBeg) :
                new ObjectParameter("DateBeg", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var dateStopParameter = dateStop.HasValue ?
                new ObjectParameter("DateStop", dateStop) :
                new ObjectParameter("DateStop", typeof(System.DateTime));
    
            var сustomerBankIdParameter = сustomerBankId.HasValue ?
                new ObjectParameter("СustomerBankId", сustomerBankId) :
                new ObjectParameter("СustomerBankId", typeof(System.Guid));
    
            var customerAddressIdParameter = customerAddressId.HasValue ?
                new ObjectParameter("CustomerAddressId", customerAddressId) :
                new ObjectParameter("CustomerAddressId", typeof(System.Guid));
    
            var performerBankIdParameter = performerBankId.HasValue ?
                new ObjectParameter("PerformerBankId", performerBankId) :
                new ObjectParameter("PerformerBankId", typeof(System.Guid));
    
            var performerAddressIdParameter = performerAddressId.HasValue ?
                new ObjectParameter("PerformerAddressId", performerAddressId) :
                new ObjectParameter("PerformerAddressId", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementUpdate", documentIdParameter, dateBegParameter, dateEndParameter, dateStopParameter, сustomerBankIdParameter, customerAddressIdParameter, performerBankIdParameter, performerAddressIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<ClaimDetails> ClaimDetailsGet(Guid? id, Guid? companyId, string protocolGroup)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var protocolGroupParameter = protocolGroup != null ?
                new ObjectParameter("ProtocolGroup", protocolGroup) :
                new ObjectParameter("ProtocolGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClaimDetails>("ClaimDetailsGet", idParameter, companyIdParameter, protocolGroupParameter);
        }
    
        public virtual ObjectResult<Guid?> DocumentInsert(string docNumber, string customerRegNumber, string performerRegNumber, Nullable<System.DateTime> docDate, string customerName, string performerName, Guid? customerCompanyId, Guid? customerContactId, Guid? performerCompanyId, Guid? performerContactId, Guid? statusId, Guid? templateId, string note, Guid? createdBy)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var customerRegNumberParameter = customerRegNumber != null ?
                new ObjectParameter("CustomerRegNumber", customerRegNumber) :
                new ObjectParameter("CustomerRegNumber", typeof(string));
    
            var performerRegNumberParameter = performerRegNumber != null ?
                new ObjectParameter("PerformerRegNumber", performerRegNumber) :
                new ObjectParameter("PerformerRegNumber", typeof(string));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var performerNameParameter = performerName != null ?
                new ObjectParameter("PerformerName", performerName) :
                new ObjectParameter("PerformerName", typeof(string));
    
            var customerCompanyIdParameter = customerCompanyId.HasValue ?
                new ObjectParameter("CustomerCompanyId", customerCompanyId) :
                new ObjectParameter("CustomerCompanyId", typeof(System.Guid));
    
            var customerContactIdParameter = customerContactId.HasValue ?
                new ObjectParameter("CustomerContactId", customerContactId) :
                new ObjectParameter("CustomerContactId", typeof(System.Guid));
    
            var performerCompanyIdParameter = performerCompanyId.HasValue ?
                new ObjectParameter("PerformerCompanyId", performerCompanyId) :
                new ObjectParameter("PerformerCompanyId", typeof(System.Guid));
    
            var performerContactIdParameter = performerContactId.HasValue ?
                new ObjectParameter("PerformerContactId", performerContactId) :
                new ObjectParameter("PerformerContactId", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(System.Guid));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Guid?>("DocumentInsert", docNumberParameter, customerRegNumberParameter, performerRegNumberParameter, docDateParameter, customerNameParameter, performerNameParameter, customerCompanyIdParameter, customerContactIdParameter, performerCompanyIdParameter, performerContactIdParameter, statusIdParameter, templateIdParameter, noteParameter, createdByParameter);
        }
    
        public virtual int DocumentUpdate(Guid? documentId, string docNumber, string customerRegNumber, string performerRegNumber, Nullable<System.DateTime> docDate, string customerName, string performerName, Guid? customerCompanyId, Guid? customerContactId, Guid? performerCompanyId, Guid? performerContactId, Guid? statusId, Guid? templateId, string note, Guid? updatedBy)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var customerRegNumberParameter = customerRegNumber != null ?
                new ObjectParameter("CustomerRegNumber", customerRegNumber) :
                new ObjectParameter("CustomerRegNumber", typeof(string));
    
            var performerRegNumberParameter = performerRegNumber != null ?
                new ObjectParameter("PerformerRegNumber", performerRegNumber) :
                new ObjectParameter("PerformerRegNumber", typeof(string));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var performerNameParameter = performerName != null ?
                new ObjectParameter("PerformerName", performerName) :
                new ObjectParameter("PerformerName", typeof(string));
    
            var customerCompanyIdParameter = customerCompanyId.HasValue ?
                new ObjectParameter("CustomerCompanyId", customerCompanyId) :
                new ObjectParameter("CustomerCompanyId", typeof(System.Guid));
    
            var customerContactIdParameter = customerContactId.HasValue ?
                new ObjectParameter("CustomerContactId", customerContactId) :
                new ObjectParameter("CustomerContactId", typeof(System.Guid));
    
            var performerCompanyIdParameter = performerCompanyId.HasValue ?
                new ObjectParameter("PerformerCompanyId", performerCompanyId) :
                new ObjectParameter("PerformerCompanyId", typeof(System.Guid));
    
            var performerContactIdParameter = performerContactId.HasValue ?
                new ObjectParameter("PerformerContactId", performerContactId) :
                new ObjectParameter("PerformerContactId", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(System.Guid));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentUpdate", documentIdParameter, docNumberParameter, customerRegNumberParameter, performerRegNumberParameter, docDateParameter, customerNameParameter, performerNameParameter, customerCompanyIdParameter, customerContactIdParameter, performerCompanyIdParameter, performerContactIdParameter, statusIdParameter, templateIdParameter, noteParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Company> CompanyGet(Guid? companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company>("CompanyGet", companyIdParameter);
        }
    
        public virtual ObjectResult<Template> TemplateGet(Guid? companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Template>("TemplateGet", companyIdParameter);
        }
    
        public virtual ObjectResult<Employee> EmployeeGet(Guid? companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("EmployeeGet", companyIdParameter);
        }
    
        public virtual int UserNotificationChangeState(Guid? notificationId, Guid? updatedBy)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserNotificationChangeState", notificationIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Guid?> UserNotificationInsert(Guid? userFromId, Guid? companyFromId, Guid? userToId, Guid? companyToId, string text, string url, Guid? objectId)
        {
            var userFromIdParameter = userFromId.HasValue ?
                new ObjectParameter("UserFromId", userFromId) :
                new ObjectParameter("UserFromId", typeof(System.Guid));
    
            var companyFromIdParameter = companyFromId.HasValue ?
                new ObjectParameter("CompanyFromId", companyFromId) :
                new ObjectParameter("CompanyFromId", typeof(System.Guid));
    
            var userToIdParameter = userToId.HasValue ?
                new ObjectParameter("UserToId", userToId) :
                new ObjectParameter("UserToId", typeof(System.Guid));
    
            var companyToIdParameter = companyToId.HasValue ?
                new ObjectParameter("CompanyToId", companyToId) :
                new ObjectParameter("CompanyToId", typeof(System.Guid));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Guid?>("UserNotificationInsert", userFromIdParameter, companyFromIdParameter, userToIdParameter, companyToIdParameter, textParameter, urlParameter, objectIdParameter);
        }
    
        public virtual ObjectResult<AgreementNumberList> AgreementNumberListGet(Guid? companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementNumberList>("AgreementNumberListGet", companyIdParameter);
        }
    
        public virtual ObjectResult<SigningStatusList> SigningStatusListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SigningStatusList>("SigningStatusListGet");
        }
    
        public virtual ObjectResult<ApprovalStatusList> ApprovalStatusListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApprovalStatusList>("ApprovalStatusListGet");
        }
    
        public virtual int ContactInsert(string f, string i, string o, string phone, string email, Guid? companyId, Guid? createdBy)
        {
            var fParameter = f != null ?
                new ObjectParameter("F", f) :
                new ObjectParameter("F", typeof(string));
    
            var iParameter = i != null ?
                new ObjectParameter("I", i) :
                new ObjectParameter("I", typeof(string));
    
            var oParameter = o != null ?
                new ObjectParameter("O", o) :
                new ObjectParameter("O", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactInsert", fParameter, iParameter, oParameter, phoneParameter, emailParameter, companyIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<ContactList> ContactListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactList>("ContactListGet");
        }
    
        public virtual int ContactUpdate(Guid? id, string f, string i, string o, string phone, string email, Guid? companyId, Guid? updatedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var fParameter = f != null ?
                new ObjectParameter("F", f) :
                new ObjectParameter("F", typeof(string));
    
            var iParameter = i != null ?
                new ObjectParameter("I", i) :
                new ObjectParameter("I", typeof(string));
    
            var oParameter = o != null ?
                new ObjectParameter("O", o) :
                new ObjectParameter("O", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactUpdate", idParameter, fParameter, iParameter, oParameter, phoneParameter, emailParameter, companyIdParameter, updatedByParameter);
        }
    
        public virtual int ContactDelete(Guid? id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactDelete", idParameter);
        }
    
        public virtual ObjectResult<ContactDetails> ContactDetailsGet(Guid? id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactDetails>("ContactDetailsGet", idParameter);
        }
    
        public virtual ObjectResult<AccountDetails> AccountDetailsGet(Guid? accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountDetails>("AccountDetailsGet", accountIdParameter);
        }
    
        public virtual ObjectResult<Clients> ClientsGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clients>("ClientsGet");
        }
    
        public virtual ObjectResult<ActDetails> ActDetailsGet(Guid? actId)
        {
            var actIdParameter = actId.HasValue ?
                new ObjectParameter("ActId", actId) :
                new ObjectParameter("ActId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActDetails>("ActDetailsGet", actIdParameter);
        }
    
        public virtual ObjectResult<ClaimLoadingSchedule> ClaimLoadingScheduleGet(Guid? claimId, Guid? companyId, string protocolGroup)
        {
            var claimIdParameter = claimId.HasValue ?
                new ObjectParameter("ClaimId", claimId) :
                new ObjectParameter("ClaimId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var protocolGroupParameter = protocolGroup != null ?
                new ObjectParameter("ProtocolGroup", protocolGroup) :
                new ObjectParameter("ProtocolGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClaimLoadingSchedule>("ClaimLoadingScheduleGet", claimIdParameter, companyIdParameter, protocolGroupParameter);
        }
    
        public virtual ObjectResult<ClaimRollingStock> ClaimRollingStockGet(Guid? claimId, Guid? companyId, string protocolGroup)
        {
            var claimIdParameter = claimId.HasValue ?
                new ObjectParameter("ClaimId", claimId) :
                new ObjectParameter("ClaimId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var protocolGroupParameter = protocolGroup != null ?
                new ObjectParameter("ProtocolGroup", protocolGroup) :
                new ObjectParameter("ProtocolGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClaimRollingStock>("ClaimRollingStockGet", claimIdParameter, companyIdParameter, protocolGroupParameter);
        }
    
        public virtual ObjectResult<ClaimRouteDetails> ClaimRouteDetailsGet(Guid? stationFromId, Guid? stationToId, string options)
        {
            var stationFromIdParameter = stationFromId.HasValue ?
                new ObjectParameter("StationFromId", stationFromId) :
                new ObjectParameter("StationFromId", typeof(System.Guid));
    
            var stationToIdParameter = stationToId.HasValue ?
                new ObjectParameter("StationToId", stationToId) :
                new ObjectParameter("StationToId", typeof(System.Guid));
    
            var optionsParameter = options != null ?
                new ObjectParameter("Options", options) :
                new ObjectParameter("Options", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClaimRouteDetails>("ClaimRouteDetailsGet", stationFromIdParameter, stationToIdParameter, optionsParameter);
        }
        public virtual ObjectResult<Template> GetTemplate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Template>("TemplateGetClaim");
        }
    
        public virtual ObjectResult<DocumentESignature> DocumentESignatureGet(Guid? documentId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentESignature>("DocumentESignatureGet", documentIdParameter);
        }
    
        public virtual ObjectResult<Guid?> AgreementsIdGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Guid?>("AgreementsIdGet");
        }
    
        public virtual int DocumentESignatureInsert(Guid? attachId, Guid? companyId, string content, Guid? createdBy)
        {
            var attachIdParameter = attachId.HasValue ?
                new ObjectParameter("AttachId", attachId) :
                new ObjectParameter("AttachId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentESignatureInsert", attachIdParameter, companyIdParameter, contentParameter, createdByParameter);
        }
    
        public virtual ObjectResult<ProtocolDetails> ProtocolDetailsGet(Guid? protocolId)
        {
            var protocolIdParameter = protocolId.HasValue ?
                new ObjectParameter("ProtocolId", protocolId) :
                new ObjectParameter("ProtocolId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProtocolDetails>("ProtocolDetailsGet", protocolIdParameter);
        }
    
        public virtual ObjectResult<UserDetailsList> UserDetailsListGet(Guid? userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDetailsList>("UserDetailsListGet", userIdParameter);
        }
    
        public virtual ObjectResult<ReportPeriodList> ReportPeriodListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportPeriodList>("ReportPeriodListGet");
        }
    
        public virtual ObjectResult<UserGet> UserGet(Guid? userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGet>("UserGet", userIdParameter);
        }
    
        public virtual ObjectResult<string> UserInsert(Guid? contactId, string userName, string passwordHash, string securityStamp, Guid? createdBy)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var securityStampParameter = securityStamp != null ?
                new ObjectParameter("SecurityStamp", securityStamp) :
                new ObjectParameter("SecurityStamp", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserInsert", contactIdParameter, userNameParameter, passwordHashParameter, securityStampParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Guid?> UserCompaniesListGet(Guid? userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Guid?>("UserCompaniesListGet", userIdParameter);
        }
    
        public virtual int EmployeeInsert(Guid? userId, Guid? companyId, Guid? createdBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeInsert", userIdParameter, companyIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> UserUpdate(Guid? userId, Guid? contactId, string userName, Nullable<bool> isActive, Guid? updatedBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserUpdate", userIdParameter, contactIdParameter, userNameParameter, isActiveParameter, updatedByParameter);
        }
    
        public virtual int EmployeeDelete(Guid? userId, Guid? companyId, Guid? updatetBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var updatetByParameter = updatetBy.HasValue ?
                new ObjectParameter("UpdatetBy", updatetBy) :
                new ObjectParameter("UpdatetBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeDelete", userIdParameter, companyIdParameter, updatetByParameter);
        }
    
        public virtual ObjectResult<UserList> UserListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserList>("UserListGet");
        }
    
        public virtual ObjectResult<Role> RoleGet(Guid? roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role>("RoleGet", roleIdParameter);
        }
    
        public virtual ObjectResult<PermissionList> PermissionListGet(Guid? roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PermissionList>("PermissionListGet", roleIdParameter);
        }
    
        public virtual int EmployeeRoleInsert(Guid? companyId, Guid? userId, Guid? roleId, Guid? createdBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeRoleInsert", companyIdParameter, userIdParameter, roleIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> RoleInsert(string name, Guid? createdBy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RoleInsert", nameParameter, createdByParameter);
        }
    
        public virtual int RolePermissionDelete(Guid? roleId, Guid? permissionId, Guid? updatedBy)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolePermissionDelete", roleIdParameter, permissionIdParameter, updatedByParameter);
        }
    
        public virtual int RolePermissionInsert(Guid? roleId, Guid? permissionId, Guid? createdBy)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolePermissionInsert", roleIdParameter, permissionIdParameter, createdByParameter);
        }
    
        public virtual int RoleUpdate(Guid? roleId, string name, Guid? updatedBy)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RoleUpdate", roleIdParameter, nameParameter, updatedByParameter);
        }
    
        public virtual int EmployeeRoleDelete(Guid? employeeId, Guid? roleId, Guid? updatedBy)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(System.Guid));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeRoleDelete", employeeIdParameter, roleIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<EmployeeRolesList> EmployeeRolesListGet(Guid? companyId, Guid? userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeRolesList>("EmployeeRolesListGet", companyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<UserNotificationList> UserNotificationListGet(Guid? notificationId, Guid? userToId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(System.Guid));
    
            var userToIdParameter = userToId.HasValue ?
                new ObjectParameter("UserToId", userToId) :
                new ObjectParameter("UserToId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserNotificationList>("UserNotificationListGet", notificationIdParameter, userToIdParameter);
        }
    
        public virtual ObjectResult<AccountList> AccountListGet(Guid? companyId, string group, Nullable<int> periodType, Nullable<System.DateTime> dateBeg, Nullable<System.DateTime> dateEnd, Guid? reportPeriod, Guid? agreementId, Guid? agrManagerId, Guid? statusId, Guid? ePStatusId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            var periodTypeParameter = periodType.HasValue ?
                new ObjectParameter("PeriodType", periodType) :
                new ObjectParameter("PeriodType", typeof(int));
    
            var dateBegParameter = dateBeg.HasValue ?
                new ObjectParameter("DateBeg", dateBeg) :
                new ObjectParameter("DateBeg", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var reportPeriodParameter = reportPeriod.HasValue ?
                new ObjectParameter("ReportPeriod", reportPeriod) :
                new ObjectParameter("ReportPeriod", typeof(System.Guid));
    
            var agreementIdParameter = agreementId.HasValue ?
                new ObjectParameter("AgreementId", agreementId) :
                new ObjectParameter("AgreementId", typeof(System.Guid));
    
            var agrManagerIdParameter = agrManagerId.HasValue ?
                new ObjectParameter("AgrManagerId", agrManagerId) :
                new ObjectParameter("AgrManagerId", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(System.Guid));
    
            var ePStatusIdParameter = ePStatusId.HasValue ?
                new ObjectParameter("EPStatusId", ePStatusId) :
                new ObjectParameter("EPStatusId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountList>("AccountListGet", companyIdParameter, groupParameter, periodTypeParameter, dateBegParameter, dateEndParameter, reportPeriodParameter, agreementIdParameter, agrManagerIdParameter, statusIdParameter, ePStatusIdParameter);
        }
    
        public virtual ObjectResult<ActList> ActListGet(Guid? companyId, string group, Nullable<int> docPeriodType, Nullable<System.DateTime> docDateBeg, Nullable<System.DateTime> docDateEnd, Nullable<int> repPeriodType, Nullable<System.DateTime> repDateBeg, Nullable<System.DateTime> repDateEnd, Guid? agreementId, Guid? agrManagerId, Guid? statusId, Guid? ePStatusId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            var docPeriodTypeParameter = docPeriodType.HasValue ?
                new ObjectParameter("DocPeriodType", docPeriodType) :
                new ObjectParameter("DocPeriodType", typeof(int));
    
            var docDateBegParameter = docDateBeg.HasValue ?
                new ObjectParameter("DocDateBeg", docDateBeg) :
                new ObjectParameter("DocDateBeg", typeof(System.DateTime));
    
            var docDateEndParameter = docDateEnd.HasValue ?
                new ObjectParameter("DocDateEnd", docDateEnd) :
                new ObjectParameter("DocDateEnd", typeof(System.DateTime));
    
            var repPeriodTypeParameter = repPeriodType.HasValue ?
                new ObjectParameter("RepPeriodType", repPeriodType) :
                new ObjectParameter("RepPeriodType", typeof(int));
    
            var repDateBegParameter = repDateBeg.HasValue ?
                new ObjectParameter("RepDateBeg", repDateBeg) :
                new ObjectParameter("RepDateBeg", typeof(System.DateTime));
    
            var repDateEndParameter = repDateEnd.HasValue ?
                new ObjectParameter("RepDateEnd", repDateEnd) :
                new ObjectParameter("RepDateEnd", typeof(System.DateTime));
    
            var agreementIdParameter = agreementId.HasValue ?
                new ObjectParameter("AgreementId", agreementId) :
                new ObjectParameter("AgreementId", typeof(System.Guid));
    
            var agrManagerIdParameter = agrManagerId.HasValue ?
                new ObjectParameter("AgrManagerId", agrManagerId) :
                new ObjectParameter("AgrManagerId", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(System.Guid));
    
            var ePStatusIdParameter = ePStatusId.HasValue ?
                new ObjectParameter("EPStatusId", ePStatusId) :
                new ObjectParameter("EPStatusId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActList>("ActListGet", companyIdParameter, groupParameter, docPeriodTypeParameter, docDateBegParameter, docDateEndParameter, repPeriodTypeParameter, repDateBegParameter, repDateEndParameter, agreementIdParameter, agrManagerIdParameter, statusIdParameter, ePStatusIdParameter);
        }
    
        public virtual ObjectResult<AgreementList> AgreementListGet(Guid? companyId, string group, Guid? agrManagerId, Guid? templateId, Nullable<bool> onlyActive)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            var agrManagerIdParameter = agrManagerId.HasValue ?
                new ObjectParameter("AgrManagerId", agrManagerId) :
                new ObjectParameter("AgrManagerId", typeof(System.Guid));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(System.Guid));
    
            var onlyActiveParameter = onlyActive.HasValue ?
                new ObjectParameter("OnlyActive", onlyActive) :
                new ObjectParameter("OnlyActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementList>("AgreementListGet", companyIdParameter, groupParameter, agrManagerIdParameter, templateIdParameter, onlyActiveParameter);
        }
    
        public virtual ObjectResult<ClaimList> ClaimListGet(Guid? companyId, string group, Nullable<int> docPeriodType, Nullable<System.DateTime> docDateBeg, Nullable<System.DateTime> docDateEnd, Nullable<int> loadPeriodType, Nullable<System.DateTime> loadDateBeg, Nullable<System.DateTime> loadDateEnd, Guid? agreementId, Guid? docStatusId, Guid? eDStatusId, Guid? contactId, Guid? approvalStatus, Guid? signingStatus)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            var docPeriodTypeParameter = docPeriodType.HasValue ?
                new ObjectParameter("DocPeriodType", docPeriodType) :
                new ObjectParameter("DocPeriodType", typeof(int));
    
            var docDateBegParameter = docDateBeg.HasValue ?
                new ObjectParameter("DocDateBeg", docDateBeg) :
                new ObjectParameter("DocDateBeg", typeof(System.DateTime));
    
            var docDateEndParameter = docDateEnd.HasValue ?
                new ObjectParameter("DocDateEnd", docDateEnd) :
                new ObjectParameter("DocDateEnd", typeof(System.DateTime));
    
            var loadPeriodTypeParameter = loadPeriodType.HasValue ?
                new ObjectParameter("LoadPeriodType", loadPeriodType) :
                new ObjectParameter("LoadPeriodType", typeof(int));
    
            var loadDateBegParameter = loadDateBeg.HasValue ?
                new ObjectParameter("LoadDateBeg", loadDateBeg) :
                new ObjectParameter("LoadDateBeg", typeof(System.DateTime));
    
            var loadDateEndParameter = loadDateEnd.HasValue ?
                new ObjectParameter("LoadDateEnd", loadDateEnd) :
                new ObjectParameter("LoadDateEnd", typeof(System.DateTime));
    
            var agreementIdParameter = agreementId.HasValue ?
                new ObjectParameter("AgreementId", agreementId) :
                new ObjectParameter("AgreementId", typeof(System.Guid));
    
            var docStatusIdParameter = docStatusId.HasValue ?
                new ObjectParameter("DocStatusId", docStatusId) :
                new ObjectParameter("DocStatusId", typeof(System.Guid));
    
            var eDStatusIdParameter = eDStatusId.HasValue ?
                new ObjectParameter("EDStatusId", eDStatusId) :
                new ObjectParameter("EDStatusId", typeof(System.Guid));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(System.Guid));
    
            var approvalStatusParameter = approvalStatus.HasValue ?
                new ObjectParameter("ApprovalStatus", approvalStatus) :
                new ObjectParameter("ApprovalStatus", typeof(System.Guid));
    
            var signingStatusParameter = signingStatus.HasValue ?
                new ObjectParameter("SigningStatus", signingStatus) :
                new ObjectParameter("SigningStatus", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClaimList>("ClaimListGet", companyIdParameter, groupParameter, docPeriodTypeParameter, docDateBegParameter, docDateEndParameter, loadPeriodTypeParameter, loadDateBegParameter, loadDateEndParameter, agreementIdParameter, docStatusIdParameter, eDStatusIdParameter, contactIdParameter, approvalStatusParameter, signingStatusParameter);
        }
    
        public virtual ObjectResult<InstructionList> InstructionListGet(Guid? companyId, string group, Nullable<int> periodType, Nullable<System.DateTime> dateBeg, Nullable<System.DateTime> dateEnd, Guid? stationId, Guid? agreementId, Guid? agrManagerId, Guid? templateId, Guid? statusId, Guid? ePStatusId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            var periodTypeParameter = periodType.HasValue ?
                new ObjectParameter("PeriodType", periodType) :
                new ObjectParameter("PeriodType", typeof(int));
    
            var dateBegParameter = dateBeg.HasValue ?
                new ObjectParameter("DateBeg", dateBeg) :
                new ObjectParameter("DateBeg", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var stationIdParameter = stationId.HasValue ?
                new ObjectParameter("StationId", stationId) :
                new ObjectParameter("StationId", typeof(System.Guid));
    
            var agreementIdParameter = agreementId.HasValue ?
                new ObjectParameter("AgreementId", agreementId) :
                new ObjectParameter("AgreementId", typeof(System.Guid));
    
            var agrManagerIdParameter = agrManagerId.HasValue ?
                new ObjectParameter("AgrManagerId", agrManagerId) :
                new ObjectParameter("AgrManagerId", typeof(System.Guid));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(System.Guid));
    
            var ePStatusIdParameter = ePStatusId.HasValue ?
                new ObjectParameter("EPStatusId", ePStatusId) :
                new ObjectParameter("EPStatusId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InstructionList>("InstructionListGet", companyIdParameter, groupParameter, periodTypeParameter, dateBegParameter, dateEndParameter, stationIdParameter, agreementIdParameter, agrManagerIdParameter, templateIdParameter, statusIdParameter, ePStatusIdParameter);
        }
    
        public virtual ObjectResult<Guid?> DocumentAttachInsert(Guid? documentId, string fileName, byte[] content, string note, Guid? createdBy)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(byte[]));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Guid?>("DocumentAttachInsert", documentIdParameter, fileNameParameter, contentParameter, noteParameter, createdByParameter);
        }
    
        public virtual ObjectResult<ProtocolList> ProtocolListGet(Guid? companyId, string group, Nullable<int> docPeriodType, Nullable<System.DateTime> docDateBeg, Nullable<System.DateTime> docDateEnd, Nullable<int> usePeriodType, Nullable<System.DateTime> useDateBeg, Nullable<System.DateTime> useDateEnd, Guid? agreementId, Guid? agrManagerId, Guid? statusId, Guid? ePStatusId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            var docPeriodTypeParameter = docPeriodType.HasValue ?
                new ObjectParameter("DocPeriodType", docPeriodType) :
                new ObjectParameter("DocPeriodType", typeof(int));
    
            var docDateBegParameter = docDateBeg.HasValue ?
                new ObjectParameter("DocDateBeg", docDateBeg) :
                new ObjectParameter("DocDateBeg", typeof(System.DateTime));
    
            var docDateEndParameter = docDateEnd.HasValue ?
                new ObjectParameter("DocDateEnd", docDateEnd) :
                new ObjectParameter("DocDateEnd", typeof(System.DateTime));
    
            var usePeriodTypeParameter = usePeriodType.HasValue ?
                new ObjectParameter("UsePeriodType", usePeriodType) :
                new ObjectParameter("UsePeriodType", typeof(int));
    
            var useDateBegParameter = useDateBeg.HasValue ?
                new ObjectParameter("UseDateBeg", useDateBeg) :
                new ObjectParameter("UseDateBeg", typeof(System.DateTime));
    
            var useDateEndParameter = useDateEnd.HasValue ?
                new ObjectParameter("UseDateEnd", useDateEnd) :
                new ObjectParameter("UseDateEnd", typeof(System.DateTime));
    
            var agreementIdParameter = agreementId.HasValue ?
                new ObjectParameter("AgreementId", agreementId) :
                new ObjectParameter("AgreementId", typeof(System.Guid));
    
            var agrManagerIdParameter = agrManagerId.HasValue ?
                new ObjectParameter("AgrManagerId", agrManagerId) :
                new ObjectParameter("AgrManagerId", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(System.Guid));
    
            var ePStatusIdParameter = ePStatusId.HasValue ?
                new ObjectParameter("EPStatusId", ePStatusId) :
                new ObjectParameter("EPStatusId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProtocolList>("ProtocolListGet", companyIdParameter, groupParameter, docPeriodTypeParameter, docDateBegParameter, docDateEndParameter, usePeriodTypeParameter, useDateBegParameter, useDateEndParameter, agreementIdParameter, agrManagerIdParameter, statusIdParameter, ePStatusIdParameter);
        }
    
        public virtual ObjectResult<Protocol> ProtocolGet(Guid? companyId, Guid? id)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Protocol>("ProtocolGet", companyIdParameter, idParameter);
        }
    
        public virtual ObjectResult<Act> ActGet(Guid? companyId, Guid? id)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Act>("ActGet", companyIdParameter, idParameter);
        }
    
        public virtual ObjectResult<Claim> ClaimGet(Guid? companyId, Guid? id)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Claim>("ClaimGet", companyIdParameter, idParameter);
        }
    
        public virtual ObjectResult<Instruction> InstructionGet(Guid? companyId, Guid? id)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Instruction>("InstructionGet", companyIdParameter, idParameter);
        }
    
        public virtual ObjectResult<SupplementaryTemplate> SupplementaryTemplateGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplementaryTemplate>("SupplementaryTemplateGet");
        }
    
        public virtual int SupplementaryAgreementInsert(Guid? agreementId, Guid? supplementaryAgreementId, Guid? createdBy)
        {
            var agreementIdParameter = agreementId.HasValue ?
                new ObjectParameter("AgreementId", agreementId) :
                new ObjectParameter("AgreementId", typeof(System.Guid));
    
            var supplementaryAgreementIdParameter = supplementaryAgreementId.HasValue ?
                new ObjectParameter("SupplementaryAgreementId", supplementaryAgreementId) :
                new ObjectParameter("SupplementaryAgreementId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplementaryAgreementInsert", agreementIdParameter, supplementaryAgreementIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Account> AccountGet(Guid? companyId, Guid? id)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("AccountGet", companyIdParameter, idParameter);
        }
    
        public virtual ObjectResult<Agreement> AgreementGet(Guid? companyId, Guid? id)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Agreement>("AgreementGet", companyIdParameter, idParameter);
        }
    
        public virtual ObjectResult<SupplementaryAgreement> SupplementaryAgreementGet(Guid? companyId, Guid? id)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplementaryAgreement>("SupplementaryAgreementGet", companyIdParameter, idParameter);
        }
    
        public virtual int SupplementaryAgreementUpdate(Guid? supplementaryAgreementId, Guid? updatedBy)
        {
            var supplementaryAgreementIdParameter = supplementaryAgreementId.HasValue ?
                new ObjectParameter("SupplementaryAgreementId", supplementaryAgreementId) :
                new ObjectParameter("SupplementaryAgreementId", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplementaryAgreementUpdate", supplementaryAgreementIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<ReceivedMailList> ReceivedMailListGet(Guid? companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceivedMailList>("ReceivedMailListGet", companyIdParameter);
        }
    
        public virtual ObjectResult<UserMail> UserMailGet(Guid? id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMail>("UserMailGet", idParameter);
        }
    
        public virtual ObjectResult<UserMailReceivedList> UserMailReceivedListGet(Guid? companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMailReceivedList>("UserMailReceivedListGet", companyIdParameter);
        }
    
        public virtual ObjectResult<UserMailSentList> UserMailSentListGet(Guid? companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMailSentList>("UserMailSentListGet", companyIdParameter);
        }
    
        public virtual int UserMailViewTimeUpdate(Guid? id, Nullable<System.DateTime> viewTime, Guid? viewerId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var viewTimeParameter = viewTime.HasValue ?
                new ObjectParameter("ViewTime", viewTime) :
                new ObjectParameter("ViewTime", typeof(System.DateTime));
    
            var viewerIdParameter = viewerId.HasValue ?
                new ObjectParameter("ViewerId", viewerId) :
                new ObjectParameter("ViewerId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserMailViewTimeUpdate", idParameter, viewTimeParameter, viewerIdParameter);
        }
    
        public virtual ObjectResult<Guid?> UserByNameGet(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Guid?>("UserByNameGet", userNameParameter);
        }
    
        public virtual int UserMailInsert(string subject, string body, Guid? senderUserId, Guid? senderCompanyId, Guid? receiverCompanyId)
        {
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var senderUserIdParameter = senderUserId.HasValue ?
                new ObjectParameter("SenderUserId", senderUserId) :
                new ObjectParameter("SenderUserId", typeof(System.Guid));
    
            var senderCompanyIdParameter = senderCompanyId.HasValue ?
                new ObjectParameter("SenderCompanyId", senderCompanyId) :
                new ObjectParameter("SenderCompanyId", typeof(System.Guid));
    
            var receiverCompanyIdParameter = receiverCompanyId.HasValue ?
                new ObjectParameter("ReceiverCompanyId", receiverCompanyId) :
                new ObjectParameter("ReceiverCompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserMailInsert", subjectParameter, bodyParameter, senderUserIdParameter, senderCompanyIdParameter, receiverCompanyIdParameter);
        }
    
        public virtual ObjectResult<DocumentAttachList> DocumentAttachListGet(Guid? documentId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentAttachList>("DocumentAttachListGet", documentIdParameter);
        }
    
        public virtual ObjectResult<DocumentConditionList> DocumentConditionListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentConditionList>("DocumentConditionListGet");
        }
    
        public virtual ObjectResult<DocumentCondition> DocumentConditionGet(Guid? documentId, Nullable<System.DateTime> date)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentCondition>("DocumentConditionGet", documentIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<DocumentAttach> DocumentAttachGet(Guid? attachId)
        {
            var attachIdParameter = attachId.HasValue ?
                new ObjectParameter("AttachId", attachId) :
                new ObjectParameter("AttachId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentAttach>("DocumentAttachGet", attachIdParameter);
        }
    
        public virtual int DocumentConditionInsert(Guid? documentId, Guid? conditionId, string valueString, Nullable<int> valueInteger, Nullable<double> valueFloat, Nullable<decimal> valueMoney, Guid? valueGUID, Nullable<System.DateTime> valueDateTime, string conditionLimitValue, Guid? createdBy)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            var conditionIdParameter = conditionId.HasValue ?
                new ObjectParameter("ConditionId", conditionId) :
                new ObjectParameter("ConditionId", typeof(System.Guid));
    
            var valueStringParameter = valueString != null ?
                new ObjectParameter("ValueString", valueString) :
                new ObjectParameter("ValueString", typeof(string));
    
            var valueIntegerParameter = valueInteger.HasValue ?
                new ObjectParameter("ValueInteger", valueInteger) :
                new ObjectParameter("ValueInteger", typeof(int));
    
            var valueFloatParameter = valueFloat.HasValue ?
                new ObjectParameter("ValueFloat", valueFloat) :
                new ObjectParameter("ValueFloat", typeof(double));
    
            var valueMoneyParameter = valueMoney.HasValue ?
                new ObjectParameter("ValueMoney", valueMoney) :
                new ObjectParameter("ValueMoney", typeof(decimal));
    
            var valueGUIDParameter = valueGUID.HasValue ?
                new ObjectParameter("ValueGUID", valueGUID) :
                new ObjectParameter("ValueGUID", typeof(System.Guid));
    
            var valueDateTimeParameter = valueDateTime.HasValue ?
                new ObjectParameter("ValueDateTime", valueDateTime) :
                new ObjectParameter("ValueDateTime", typeof(System.DateTime));
    
            var conditionLimitValueParameter = conditionLimitValue != null ?
                new ObjectParameter("ConditionLimitValue", conditionLimitValue) :
                new ObjectParameter("ConditionLimitValue", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentConditionInsert", documentIdParameter, conditionIdParameter, valueStringParameter, valueIntegerParameter, valueFloatParameter, valueMoneyParameter, valueGUIDParameter, valueDateTimeParameter, conditionLimitValueParameter, createdByParameter);
        }
    
        public virtual int DocumentConditionUpdate(Guid? documentId, Guid? conditionId, string valueString, Nullable<int> valueInteger, Nullable<double> valueFloat, Nullable<decimal> valueMoney, Guid? valueGUID, Nullable<System.DateTime> valueDateTime, string conditionLimitValue, Guid? updatedBy)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            var conditionIdParameter = conditionId.HasValue ?
                new ObjectParameter("ConditionId", conditionId) :
                new ObjectParameter("ConditionId", typeof(System.Guid));
    
            var valueStringParameter = valueString != null ?
                new ObjectParameter("ValueString", valueString) :
                new ObjectParameter("ValueString", typeof(string));
    
            var valueIntegerParameter = valueInteger.HasValue ?
                new ObjectParameter("ValueInteger", valueInteger) :
                new ObjectParameter("ValueInteger", typeof(int));
    
            var valueFloatParameter = valueFloat.HasValue ?
                new ObjectParameter("ValueFloat", valueFloat) :
                new ObjectParameter("ValueFloat", typeof(double));
    
            var valueMoneyParameter = valueMoney.HasValue ?
                new ObjectParameter("ValueMoney", valueMoney) :
                new ObjectParameter("ValueMoney", typeof(decimal));
    
            var valueGUIDParameter = valueGUID.HasValue ?
                new ObjectParameter("ValueGUID", valueGUID) :
                new ObjectParameter("ValueGUID", typeof(System.Guid));
    
            var valueDateTimeParameter = valueDateTime.HasValue ?
                new ObjectParameter("ValueDateTime", valueDateTime) :
                new ObjectParameter("ValueDateTime", typeof(System.DateTime));
    
            var conditionLimitValueParameter = conditionLimitValue != null ?
                new ObjectParameter("ConditionLimitValue", conditionLimitValue) :
                new ObjectParameter("ConditionLimitValue", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentConditionUpdate", documentIdParameter, conditionIdParameter, valueStringParameter, valueIntegerParameter, valueFloatParameter, valueMoneyParameter, valueGUIDParameter, valueDateTimeParameter, conditionLimitValueParameter, updatedByParameter);
        }
    
        public virtual int DocumentConditionDelete(Guid? documentId, Guid? conditionId, Guid? updatedBy)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(System.Guid));
    
            var conditionIdParameter = conditionId.HasValue ?
                new ObjectParameter("ConditionId", conditionId) :
                new ObjectParameter("ConditionId", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentConditionDelete", documentIdParameter, conditionIdParameter, updatedByParameter);
        }
    
        public virtual int DocumentAttachDelete(Guid? id, Guid? updatedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentAttachDelete", idParameter, updatedByParameter);
        }
    
        public virtual int DocumentAttachUpdate(Guid? id, string note, Guid? updatedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentAttachUpdate", idParameter, noteParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<SupplementaryAgreementList> SupplementaryAgreementListGet(Guid? agreementId, Nullable<bool> onlyActive)
        {
            var agreementIdParameter = agreementId.HasValue ?
                new ObjectParameter("AgreementId", agreementId) :
                new ObjectParameter("AgreementId", typeof(System.Guid));
    
            var onlyActiveParameter = onlyActive.HasValue ?
                new ObjectParameter("OnlyActive", onlyActive) :
                new ObjectParameter("OnlyActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplementaryAgreementList>("SupplementaryAgreementListGet", agreementIdParameter, onlyActiveParameter);
        }
    }
}
