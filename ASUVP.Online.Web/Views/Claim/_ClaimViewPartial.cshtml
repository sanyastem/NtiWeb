@using ASUVP.Core.Configuration
@using ASUVP.Core.DataAccess.Model
@using ASUVP.Online.Web.Tools
@model ASUVP.Online.Web.Models.Claim.ClaimVM

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "ClaimView";
        settings.CallbackRouteValues = new
        {
            Controller = "Claim",
            Action = "ClaimViewPartial",
            period = Model.Filter.DocPeriodType,
            dateBeg = Model.Filter.DocDateBeg,
            dateEnd = Model.Filter.DocDateEnd,
            shipment = Model.Filter.ShipmentType,
            shipmentBeg = Model.Filter.ShipmentBeg,
            shipmentEnd = Model.Filter.ShipmentEnd,
            coordination = Model.Filter.StatusId,
            signing = Model.Filter.EPStatusId,
            manager = Model.Filter.AgrManagerId
        };
        settings.CommandColumn.Visible = true;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
        settings.CommandColumn.Caption = " ";
        settings.CommandColumn.Width = 53;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.KeyFieldName = nameof(ClaimList.Id);


        var widthButtonColumn = 0;
        if (AuthManager.User.IsInRole("ClaimView"))
        {
            widthButtonColumn += 43;
        }
        if (AuthManager.User.IsInRole("ClaimEdit"))
        {
            widthButtonColumn += 43;
        }
        if (AuthManager.User.IsInRole("ClaimDelete"))
        {
            widthButtonColumn += 43;
        }
        var viewButtonColumn = new MVCxGridViewColumn() { Width = widthButtonColumn };
        settings.Columns.Add(viewButtonColumn);
        viewButtonColumn.SetHeaderTemplateContent(c =>
        {
            c.ID = "btnViewHeader";
        });
        viewButtonColumn.SetDataItemTemplateContent(c =>
        {
            c.ID = "btnViews";

            Html.DevExpress().Button(
            b =>
            {
                b.Name = "btnView_" + c.VisibleIndex;
                b.Images.Image.Url = Url.Content("~/Content/img/doc_view.png");
                b.Images.Image.ToolTip = "Просмотр";
                b.Images.Image.AlternateText = "Просмотр";
                b.Images.Image.Height = 32;
                b.EnableTheming = false;
                b.Text = "";
                b.ClientVisible = AuthManager.User.IsInRole("ClaimView");
                b.ClientSideEvents.Click = string.Format("function(s, e) {{ OnViewClaimClick('{0}','{1}'); }}", settings.Name, c.KeyValue); //'window.Open(@Url.Action("Details", "Claim", new {id = c.KeyValue}))');
            }).Render();
            Html.DevExpress().Button(b =>
            {
                b.Name = "btnEdit_" + c.VisibleIndex;
                b.Images.Image.Url = Url.Content("~/Content/img/doc_edit.png");
                b.Images.Image.ToolTip = "Изменить";
                b.Images.Image.AlternateText = "Изменить";
                b.Images.Image.Height = 32;
                b.EnableTheming = false;
                b.Text = "";
                b.ClientSideEvents.Click = "";
                b.ClientVisible = AuthManager.User.IsInRole("ClaimEdit");
            }).Render();
            Html.DevExpress().Button(b =>
            {
                b.Name = "btnDelete_" + c.VisibleIndex;
                b.Images.Image.Url = Url.Content("~/Content/img/doc_del.png");
                b.Images.Image.ToolTip = "Удалить";
                b.Images.Image.AlternateText = "Удалить";
                b.Images.Image.Height = 32;
                b.EnableTheming = false;
                b.Text = "";
                b.ClientSideEvents.Click = string.Format("function(s, e) {{ OnDeleteClaimClick('{0}','{1}'); }}", settings.Name, c.KeyValue);
                b.ClientVisible = AuthManager.User.IsInRole("ClaimDelete");
            }).Render();
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.HasAttachmentHint);
            column.Width = 80;
            column.Caption = "Вложение";

            column.SetHeaderCaptionTemplateContent(c =>
            {
                ViewContext.Writer.Write($"<img style=\"float:left; display: block;\" width=\"24\" height=\"24\" alt=\"Нет данных\" src=\"{Url.Content("~/Content/img/attach.png")}\" title=\"Вложение\" />");
            });

            column.SetDataItemTemplateContent(c =>
            {
                string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content($"~{DataBinder.Eval(c.DataItem, nameof(ClaimList.HasAttachmentImgPath))}");
                string imageHint = "";
                try
                {
                    imageHint = DataBinder.Eval(c.DataItem, nameof(ClaimList.HasAttachmentHint)).ToString();
                    if (imageUrl != "/" && imageUrl != "/ASUVP.Online.Web/")
                    {
                        ViewContext.Writer.Write($"<img style=\"float:none; display: block; margin-left: auto; margin-right: auto;\" width=\"32\" height=\"32\" alt=\"Нет данных\" src=\"{imageUrl}\" title=\"{imageHint}\" onclick=\"onDocAttachClick('{ c.KeyValue}')\" />");
                    }
                }
                catch
                {
                }
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.RegNumber);
            column.Caption = "№ заявки";
            column.Width = 160;
            column.ToolTip = "Номер заявки";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.DocDate);
            column.Caption = "Дата";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.PropertiesEdit.DisplayFormatString = ConfigManager.ShortDateTimeFormat;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            column.Width = 100;
            column.ToolTip = "Дата подачи Заявки";

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.AgreementName);
            column.Caption = "Договор";
            column.Width = 220;
            column.ToolTip = "Договор с Клиентом";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.DateBeg);
            column.Caption = "Погрузка С";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.PropertiesEdit.DisplayFormatString = ConfigManager.ShortDateTimeFormat;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            column.Width = 140;
            column.ToolTip = "Дата начала погрузки";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.DateEnd);
            column.Caption = "Погрузка ПО";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.PropertiesEdit.DisplayFormatString = ConfigManager.ShortDateTimeFormat;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            column.Width = 140;
            column.ToolTip = "Дата завершения погрузки";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.StFromName);
            column.Caption = "Ст.отправления";
            column.Width = 220;
            column.ToolTip = "Наименование станции отправления (погрузки)";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.StToName);
            column.Caption = "Ст.Назначения";
            column.Width = 220;
            column.ToolTip = "Наименование станции назначения (выгрузки)";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.CarCount);
            column.Caption = "Вагонов";
            column.Width = 100;
            column.ToolTip = "Количество вагонов по Заявке";
            column.PropertiesEdit.DisplayFormatString = "### ### ###";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.FrWeight);
            column.Caption = "Вес (т)";
            column.Width = 120;
            column.ToolTip = "Общий вес груза по Заявке";
            column.PropertiesEdit.DisplayFormatString = DisplayFormatSettings.GetDisplayFormatString();
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.FrETSNGName);
            column.Caption = "Груз";
            column.Width = 120;
            column.ToolTip = "Наиманование груза ЕТСНГ";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.TelegrammList);
            column.Caption = "Телеграмма ЭТРАН";
            column.Width = 220;
            column.ToolTip = "Перечень выпущенных телеграмм";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.ContactFIO);
            column.Caption = "Менеджер";
            column.Width = 220;
            column.ToolTip = "Менеджер по Договору";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.ApprovalPerformerHint);
            column.Caption = "Согл Э";
            column.Width = 110;
            column.SetDataItemTemplateContent(c =>
            {
                string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content($"~{DataBinder.Eval(c.DataItem, nameof(ClaimList.ApprovalPerformerImgPath))}");
                string imageHint = "";
                try
                {
                    imageHint = DataBinder.Eval(c.DataItem, nameof(ClaimList.ApprovalPerformerHint)).ToString();
                    ViewContext.Writer.Write($"<img style=\"display: block; margin-left: auto; margin-right: auto;\" width=\"32\" height=\"32\" alt=\"Нет данных\" src=\"{imageUrl}\" title=\"{imageHint}\" />");
                }
                catch { }
            });
            column.ToolTip = "Статус согласования Экспедитором";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.ApprovalCustomerHint);
            column.Caption = "Согл К";
            column.Width = 110;
            column.SetDataItemTemplateContent(c =>
            {
                string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content($"~{DataBinder.Eval(c.DataItem, nameof(ClaimList.ApprovalCustomerImgPath))}");
                string imageHint = "";
                try
                {
                    imageHint = DataBinder.Eval(c.DataItem, nameof(ClaimList.ApprovalCustomerHint)).ToString();
                    ViewContext.Writer.Write($"<img style=\"display: block; margin-left: auto; margin-right: auto;\" width=\"32\" height=\"32\" alt=\"Нет данных\" src=\"{imageUrl}\" title=\"{imageHint}\" />");
                }
                catch { }
            });
            column.ToolTip = "Статус согласования Клиентом";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.SigningPerformerHint);
            column.Caption = "ЭП Э";
            column.Width = 110;
            column.SetDataItemTemplateContent(c =>
            {
                string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content($"~{DataBinder.Eval(c.DataItem, nameof(ClaimList.SigningPerformerImgPath))}");
                string imageHint = "";
                try
                {
                    imageHint = DataBinder.Eval(c.DataItem, nameof(ClaimList.SigningPerformerHint)).ToString();
                    ViewContext.Writer.Write($"<img style=\"display: block; margin-left: auto; margin-right: auto;\" width=\"32\" height=\"32\" alt=\"Нет данных\" src=\"{imageUrl}\" title=\"{imageHint}\" />");
                }
                catch { }
            });
            column.ToolTip = "Статус подписания ЭП Экспедитором";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = nameof(ClaimList.SigningCustomerHint);
            column.Caption = "ЭП К";
            column.Width = 110;
            column.SetDataItemTemplateContent(c =>
            {
                string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content($"~{DataBinder.Eval(c.DataItem, nameof(ClaimList.SigningCustomerImgPath))}");
                string imageHint = "";
                try
                {
                    imageHint = DataBinder.Eval(c.DataItem, nameof(ClaimList.SigningCustomerHint)).ToString();
                    ViewContext.Writer.Write($"<img style=\"display: block; margin-left: auto; margin-right: auto;\" width=\"32\" height=\"32\" alt=\"Нет данных\" src=\"{imageUrl}\" title=\"{imageHint}\" />");
                }
                catch { }
            });
            column.ToolTip = "Статус подписания ЭП Клиентом";
        });

        settings.CustomJSProperties = (sender, e) =>
        {
            MVCxGridView gv = sender as MVCxGridView;
            if (gv != null)
            {
                e.Properties["cp_Filter"] = gv.FilterExpression;
                e.Properties["cp_FilterPeriod"] = Model.Filter.DocPeriodType;
                e.Properties["cp_FilterTimeBeg"] = Model.Filter.DocDateBeg;
                e.Properties["cp_FilterTimeEnd"] = Model.Filter.DocDateEnd;
                e.Properties["cp_FilterShipment"] = Model.Filter.ShipmentType;
                e.Properties["cp_FilterShipmentBeg"] = Model.Filter.ShipmentBeg;
                e.Properties["cp_FilterShipmentEnd"] = Model.Filter.ShipmentEnd;
                e.Properties["cp_FilterCoordination"] = Model.Filter.StatusId;
                e.Properties["cp_FilterSigning"] = Model.Filter.EPStatusId;
                e.Properties["cp_FilterAgreement"] = Model.Filter.Agreement;
                e.Properties["cp_FilterManager"] = Model.Filter.AgrManagerId;

                int startIndex = gv.PageIndex * gv.SettingsPager.PageSize;
                int endIndex = Math.Min(gv.VisibleRowCount, startIndex + gv.SettingsPager.PageSize);
                object[] attachments = new object[endIndex - startIndex];
                for (int i = startIndex; i < endIndex; i++)
                {
                    attachments[i - startIndex] = gv.GetRowValues(i, nameof(ClaimList.HasAttachmentHint));
                }
                e.Properties["cp_attachments"] = attachments;
            }
        };


        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
        settings.ApplyPaging();
        settings.ApplyBasicLayout();
    });
}
@grid.Bind(Model.Claims).GetHtml()